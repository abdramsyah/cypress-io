{
  "stats": {
    "suites": 2,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2024-01-05T13:29:28.515Z",
    "end": "2024-01-05T13:29:29.186Z",
    "duration": 671,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8b475c60-4528-47ec-b0e1-4ed1fb511a50",
      "title": "",
      "fullFile": "cypress\\e2e\\banner.cy.js",
      "file": "cypress\\e2e\\banner.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1cefab1f-6d32-4197-94d2-e580c86062c2",
          "title": "Get List of Banners",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test GET request for list of banners",
              "fullTitle": "Get List of Banners Test GET request for list of banners",
              "timedOut": null,
              "duration": 324,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: \"/api/admin/v1/banner/list-banner\",\n  // Ganti URL sesuai dengan endpoint yang sesuai di aplikasi Node.js Anda\n  headers: {\n    authorization: \"Bearer \" + Cypress.env(\"ACCESS_TOKEN\")\n  }\n}).then(response => {\n  expect(response).to.have.property(\"status\").to.equal(200);\n  expect(response.body).to.have.property(\"success\").to.equal(true);\n  expect(response.body).to.have.property(\"message_client\").to.equal(\"List Banner Success\");\n  // Ensure data structure is as expected\n  expect(response.body.data).to.have.property(\"currentPage\");\n  expect(response.body.data).to.have.property(\"pageSize\");\n  expect(response.body.data).to.have.property(\"lastPage\");\n  expect(response.body.data).to.have.property(\"countAllData\");\n  expect(response.body.data).to.have.property(\"pages\");\n  expect(response.body.data).to.have.property(\"data\").to.be.an(\"array\");\n  // Validate data for each banner\n  response.body.data.data.forEach(banner => {\n    expect(banner).to.have.property(\"id\");\n    expect(banner).to.have.property(\"name\");\n    expect(banner).to.have.property(\"image\");\n    expect(banner).to.have.property(\"url\");\n    expect(banner).to.have.property(\"start_date\");\n    expect(banner).to.have.property(\"end_date\");\n    expect(banner).to.have.property(\"prioritas\");\n    // Customize additional assertions based on your data structure\n    // For example, check if 'status' property is present and its value\n  });\n});",
              "err": {},
              "uuid": "f28b21df-a923-4ee1-a1c9-e4217a0d0cfe",
              "parentUUID": "1cefab1f-6d32-4197-94d2-e580c86062c2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test handling empty list of banners",
              "fullTitle": "Get List of Banners Test handling empty list of banners",
              "timedOut": null,
              "duration": 56,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Simulate a case where there are no banners in the response\ncy.request({\n  method: \"GET\",\n  url: \"/api/admin/v1/banner/list-banner\",\n  // Ganti URL sesuai dengan endpoint yang sesuai di aplikasi Node.js Anda\n  headers: {\n    authorization: \"Bearer \" + Cypress.env(\"ACCESS_TOKEN\")\n  }\n}).then(response => {\n  expect(response).to.have.property(\"status\").to.equal(200);\n  expect(response.body).to.have.property(\"success\").to.equal(true);\n  expect(response.body).to.have.property(\"message_client\").to.equal(\"List Banner Success\");\n  // expect(response.body.data.data).to.be.an(\"array\").that.is.empty;\n});",
              "err": {},
              "uuid": "ba44e751-9578-4860-8b64-85ca8f93f964",
              "parentUUID": "1cefab1f-6d32-4197-94d2-e580c86062c2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f28b21df-a923-4ee1-a1c9-e4217a0d0cfe",
            "ba44e751-9578-4860-8b64-85ca8f93f964"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 380,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "64c21d0d-0b1e-443f-b63b-91b0c9cc2c96",
          "title": "Get Banner Details",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test GET request for banner details",
              "fullTitle": "Get Banner Details Test GET request for banner details",
              "timedOut": null,
              "duration": 72,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Assuming you have a banner with ID 1 in your database\nconst bannerId = 1;\ncy.request({\n  method: \"GET\",\n  url: `/api/admin/v1/banner/${bannerId}`,\n  headers: {\n    authorization: \"Bearer \" + Cypress.env(\"ACCESS_TOKEN\")\n  }\n}).then(response => {\n  // Assuming response body structure based on your node.js implementation\n  expect(response).to.have.property(\"status\").to.equal(200);\n  expect(response.body.data).to.have.property(\"id\").to.equal(bannerId);\n  expect(response.body.data).to.have.property(\"name\");\n  expect(response.body.data).to.have.property(\"image\");\n  expect(response.body.data).to.have.property(\"url\");\n  expect(response.body.data).to.have.property(\"start_date\");\n  expect(response.body.data).to.have.property(\"end_date\");\n  expect(response.body.data).to.have.property(\"prioritas\");\n  expect(response.body.data).to.have.property(\"created_at\");\n  expect(response.body.data).to.have.property(\"created_by\");\n  expect(response.body.data).to.have.property(\"updated_by\");\n  expect(response.body.data).to.have.property(\"updated_at\");\n  // You may need to adjust the property expectations based on your actual implementation\n});",
              "err": {},
              "uuid": "704a6b08-487a-4d44-ba00-cb576d51bee5",
              "parentUUID": "64c21d0d-0b1e-443f-b63b-91b0c9cc2c96",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test handling non-existing banner",
              "fullTitle": "Get Banner Details Test handling non-existing banner",
              "timedOut": null,
              "duration": 44,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nonExistingBannerId = 999; // Assuming this ID does not exist\ncy.request({\n  method: \"GET\",\n  url: `/api/admin/v1/banner/${nonExistingBannerId}`,\n  headers: {\n    authorization: \"Bearer \" + Cypress.env(\"ACCESS_TOKEN\")\n  },\n  failOnStatusCode: false // Allow non-2xx status codes\n}).then(response => {\n  expect(response).to.have.property(\"status\").to.equal(404);\n  expect(response.body).to.have.property(\"message_client\").to.equal(\"Banner not found\");\n  // You may need to adjust the property expectations based on your actual error handling\n});",
              "err": {},
              "uuid": "fee5d067-38f6-49ff-a73b-234cd36c7b35",
              "parentUUID": "64c21d0d-0b1e-443f-b63b-91b0c9cc2c96",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "704a6b08-487a-4d44-ba00-cb576d51bee5",
            "fee5d067-38f6-49ff-a73b-234cd36c7b35"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 116,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report"
      },
      "version": "6.2.0"
    }
  }
}